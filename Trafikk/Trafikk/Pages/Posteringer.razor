@page "/"
@using System.Text.Json
@using System.Web
@using Rekneskap.Services
@inject PosteringServiceJsonDOM PosteringSvc

<PageTitle>Posteringer</PageTitle>

<h1>Posteringer</h1>

@if (getBranchesError || posteringer is null)
{
    <p>Unable to get posteringer. Please try again later.</p>
}
else
{
    <table>
        @foreach (var postering in posteringer)
        {
            <tr>
                @foreach (var prop in postering.EnumerateObject())
                {
                    @if(prop.Name.EndsWith("_label"))
                        continue;    
                    <td>
                        @if (prop.Value.GetProperty("type").ValueEquals("uri"))
                        {
                            var objectUri = @prop.Value.GetProperty("value").ToString();
                            var encodedUri = HttpUtility.UrlEncode(objectUri);
                            <a href="lookup?objectUri=@encodedUri">
                                @postering.GetProperty($"{prop.Name}_label").GetProperty("value").ToString()
                            </a>
                        }
                        else
                        {
                            @prop.Value.GetProperty("value").ToString()
                        }
                    </td>
                }
            </tr>
        }
    </table>
}

@code {
    private List<JsonElement> posteringer = new List<JsonElement>();
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    
    protected override async Task OnInitializedAsync()
    {
        var posteringerAsync = PosteringSvc.getPosteringer();
        await foreach (var postering in posteringerAsync)
        {
            posteringer.Add(postering);
            this.StateHasChanged(); 
        }
        shouldRender = true;
    }
    
}